const express = require('express');
const bodyParser = require('body-parser');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const app = express();
app.use(bodyParser.json());

// Determine the database file path based on the environment or use a default path
// const dbFilePath = process.env.DB_FILE_PATH || path.join(__dirname, 'shared/database/inventory.db');

//const dbFilePath = path.join(__dirname, '../shared/database/warehouse.db');
const dbFilePath = 'db:/usr/src/app/shared/database/warehouse.db';

// Connect to the SQLite database
const db = new sqlite3.Database(dbFilePath, sqlite3.OPEN_READWRITE, err => {
  if (err) {
    console.error('Error opening database:', err.message);
  } else {
    console.log('Connected to the SQLite database');
  }
});

// Endpoint to get all items in the inventory from the database
app.get('/api/warehouse/inventory', (req, res) => {
  const sql = 'SELECT * FROM items';

  db.all(sql, [], (err, rows) => {
    if (err) {
      console.error('Error querying database:', err.message);
      res.status(500).json({ error: 'Internal server error' });
    } else {
      res.json(rows);
    }
  });
});

// Endpoint to add an item to the inventory in the database
app.post('/api/warehouse/inventory/add', (req, res) => {
  const newItem = req.body;

  const sql = 'INSERT INTO items (name, price, quantity) VALUES (?, ?, ?)';
  const params = [newItem.name, newItem.price, newItem.quantity];

  db.run(sql, params, function(err) {
    if (err) {
      console.error('Error inserting into database:', err.message);
      res.status(500).json({ error: 'Internal server error' });
    } else {
      res.status(201).json({ message: 'Item added to inventory', newItem });
    }
  });
});

// Endpoint to delete an item from the inventory in the database by ID
app.delete('/api/warehouse/inventory/delete/:id', (req, res) => {
  const idToDelete = parseInt(req.params.id);
  const sql = 'DELETE FROM items WHERE id = ?';

  db.run(sql, idToDelete, function(err) {
    if (err) {
      console.error('Error deleting from database:', err.message);
      res.status(500).json({ error: 'Internal server error' });
    } else if (this.changes === 0) {
      res.status(404).json({ message: 'Item not found in inventory' });
    } else {
      res.json({ message: 'Item deleted from inventory', deletedItemId: idToDelete });
    }
  });
});

// Endpoint to update an item in the inventory in the database by ID
app.put('/api/warehouse/inventory/update/:id', (req, res) => {
  const idToUpdate = parseInt(req.params.id);
  const updatedItem = req.body;

  const sql = 'UPDATE items SET name = ?, price = ?, quantity = ? WHERE id = ?';
  const params = [updatedItem.name, updatedItem.price, updatedItem.quantity, idToUpdate];

  db.run(sql, params, function(err) {
    if (err) {
      console.error('Error updating database:', err.message);
      res.status(500).json({ error: 'Internal server error' });
    } else if (this.changes === 0) {
      res.status(404).json({ message: 'Item not found in inventory' });
    } else {
      res.json({ message: 'Item updated in inventory', updatedItem });
    }
  });
});

// Start the server
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

// Close the database connection when the application stops running
process.on('exit', () => {
  db.close();
  console.log('Database connection closed');
});
